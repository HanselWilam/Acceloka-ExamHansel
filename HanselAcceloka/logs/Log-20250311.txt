2025-03-11 10:01:37.137 +07:00 [INF] Now listening on: https://localhost:5105
2025-03-11 10:01:37.249 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2025-03-11 10:01:37.250 +07:00 [INF] Hosting environment: Development
2025-03-11 10:01:37.250 +07:00 [INF] Content root path: D:\WorkingSpace\Repository\ExamAcceloka-Hansel\HanselAcceloka
2025-03-11 10:01:38.116 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/index.html - null null
2025-03-11 10:01:38.572 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/index.html - 200 null text/html;charset=utf-8 466.7195ms
2025-03-11 10:01:38.656 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/_framework/aspnetcore-browser-refresh.js - null null
2025-03-11 10:01:38.656 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/_vs/browserLink - null null
2025-03-11 10:01:38.669 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/_framework/aspnetcore-browser-refresh.js - 200 13764 application/javascript; charset=utf-8 13.1111ms
2025-03-11 10:01:38.736 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/_vs/browserLink - 200 null text/javascript; charset=UTF-8 82.9374ms
2025-03-11 10:01:38.813 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/swagger/v1/swagger.json - null null
2025-03-11 10:01:38.840 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 26.7564ms
2025-03-11 10:01:57.103 +07:00 [INF] Request starting HTTP/2 POST https://localhost:5105/api/v1/book-ticket - application/json 82
2025-03-11 10:01:57.111 +07:00 [INF] CORS policy execution successful.
2025-03-11 10:01:57.114 +07:00 [INF] Executing endpoint 'BookTicketController.BookTicket (HanselAcceloka)'
2025-03-11 10:01:57.136 +07:00 [INF] Route matched with {action = "BookTicket", controller = "BookTicket"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] BookTicket(HanselAcceloka.Models.Requests.BookTicketRequest) on controller BookTicketController (HanselAcceloka).
2025-03-11 10:01:57.255 +07:00 [WRN] 'AddEntityFramework*' was called on the service provider, but 'UseInternalServiceProvider' wasn't called in the DbContext options configuration. Consider removing the 'AddEntityFramework*' call, as in most cases it's not needed and may cause conflicts with other products and services registered in the same service provider.
2025-03-11 10:01:58.454 +07:00 [INF] Executed DbCommand (128ms) [Parameters=[@__ticketCodes_0='?' (DbType = Object)], CommandType='"Text"', CommandTimeout='30']
SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name, c.category_id, c.category_name
FROM ticket AS t
INNER JOIN category AS c ON t.category_id = c.category_id
WHERE t.ticket_code = ANY (@__ticketCodes_0)
2025-03-11 10:01:58.610 +07:00 [ERR] Failed executing DbCommand (3ms) [Parameters=[@p0='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO bookedticket (booked_at)
VALUES (@p0)
RETURNING booked_ticket_id;
2025-03-11 10:01:58.644 +07:00 [ERR] An exception occurred in the database while saving changes for context type 'HanselAcceloka.Entities.AccelokaContext'.
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> System.ArgumentException: Cannot write DateTime with Kind=UTC to PostgreSQL type 'timestamp without time zone', consider using 'timestamp with time zone'. Note that it's not possible to mix DateTimes with different Kinds in an array, range, or multirange. (Parameter 'value')
   at Npgsql.Internal.Converters.DateTimeConverterResolver`1.Get(DateTime value, Nullable`1 expectedPgTypeId, Boolean validateOnly)
   at Npgsql.Internal.Converters.DateTimeConverterResolver.<>c.<CreateResolver>b__0_0(DateTimeConverterResolver`1 resolver, DateTime value, Nullable`1 expectedPgTypeId)
   at Npgsql.Internal.Converters.DateTimeConverterResolver`1.Get(T value, Nullable`1 expectedPgTypeId)
   at Npgsql.Internal.PgConverterResolver`1.GetAsObjectInternal(PgTypeInfo typeInfo, Object value, Nullable`1 expectedPgTypeId)
   at Npgsql.Internal.PgResolverTypeInfo.GetResolutionAsObject(Object value, Nullable`1 expectedPgTypeId)
   at Npgsql.Internal.PgTypeInfo.GetObjectResolution(Object value)
   at Npgsql.NpgsqlParameter.ResolveConverter(PgTypeInfo typeInfo)
   at Npgsql.NpgsqlParameter.ResolveTypeInfo(PgSerializerOptions options)
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(PgSerializerOptions options, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> System.ArgumentException: Cannot write DateTime with Kind=UTC to PostgreSQL type 'timestamp without time zone', consider using 'timestamp with time zone'. Note that it's not possible to mix DateTimes with different Kinds in an array, range, or multirange. (Parameter 'value')
   at Npgsql.Internal.Converters.DateTimeConverterResolver`1.Get(DateTime value, Nullable`1 expectedPgTypeId, Boolean validateOnly)
   at Npgsql.Internal.Converters.DateTimeConverterResolver.<>c.<CreateResolver>b__0_0(DateTimeConverterResolver`1 resolver, DateTime value, Nullable`1 expectedPgTypeId)
   at Npgsql.Internal.Converters.DateTimeConverterResolver`1.Get(T value, Nullable`1 expectedPgTypeId)
   at Npgsql.Internal.PgConverterResolver`1.GetAsObjectInternal(PgTypeInfo typeInfo, Object value, Nullable`1 expectedPgTypeId)
   at Npgsql.Internal.PgResolverTypeInfo.GetResolutionAsObject(Object value, Nullable`1 expectedPgTypeId)
   at Npgsql.Internal.PgTypeInfo.GetObjectResolution(Object value)
   at Npgsql.NpgsqlParameter.ResolveConverter(PgTypeInfo typeInfo)
   at Npgsql.NpgsqlParameter.ResolveTypeInfo(PgSerializerOptions options)
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(PgSerializerOptions options, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
2025-03-11 10:01:58.724 +07:00 [INF] Executed action BookTicketController.BookTicket (HanselAcceloka) in 1585.1448ms
2025-03-11 10:01:58.725 +07:00 [INF] Executed endpoint 'BookTicketController.BookTicket (HanselAcceloka)'
2025-03-11 10:01:58.728 +07:00 [ERR] HTTP POST /api/v1/book-ticket responded 500 in 1618.5345 ms
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> System.ArgumentException: Cannot write DateTime with Kind=UTC to PostgreSQL type 'timestamp without time zone', consider using 'timestamp with time zone'. Note that it's not possible to mix DateTimes with different Kinds in an array, range, or multirange. (Parameter 'value')
   at Npgsql.Internal.Converters.DateTimeConverterResolver`1.Get(DateTime value, Nullable`1 expectedPgTypeId, Boolean validateOnly)
   at Npgsql.Internal.Converters.DateTimeConverterResolver.<>c.<CreateResolver>b__0_0(DateTimeConverterResolver`1 resolver, DateTime value, Nullable`1 expectedPgTypeId)
   at Npgsql.Internal.Converters.DateTimeConverterResolver`1.Get(T value, Nullable`1 expectedPgTypeId)
   at Npgsql.Internal.PgConverterResolver`1.GetAsObjectInternal(PgTypeInfo typeInfo, Object value, Nullable`1 expectedPgTypeId)
   at Npgsql.Internal.PgResolverTypeInfo.GetResolutionAsObject(Object value, Nullable`1 expectedPgTypeId)
   at Npgsql.Internal.PgTypeInfo.GetObjectResolution(Object value)
   at Npgsql.NpgsqlParameter.ResolveConverter(PgTypeInfo typeInfo)
   at Npgsql.NpgsqlParameter.ResolveTypeInfo(PgSerializerOptions options)
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(PgSerializerOptions options, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at BookTicketCommandHandler.Handle(BookTicketCommand request, CancellationToken cancellationToken) in D:\WorkingSpace\Repository\ExamAcceloka-Hansel\HanselAcceloka\Application\BookTickets\Commands\BookTicketCommandHandler.cs:line 34
   at BookTicketController.BookTicket(BookTicketRequest request) in D:\WorkingSpace\Repository\ExamAcceloka-Hansel\HanselAcceloka\Controllers\BookTicketController.cs:line 19
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
2025-03-11 10:01:58.738 +07:00 [ERR] An unhandled exception has occurred while executing the request.
Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while saving the entity changes. See the inner exception for details.
 ---> System.ArgumentException: Cannot write DateTime with Kind=UTC to PostgreSQL type 'timestamp without time zone', consider using 'timestamp with time zone'. Note that it's not possible to mix DateTimes with different Kinds in an array, range, or multirange. (Parameter 'value')
   at Npgsql.Internal.Converters.DateTimeConverterResolver`1.Get(DateTime value, Nullable`1 expectedPgTypeId, Boolean validateOnly)
   at Npgsql.Internal.Converters.DateTimeConverterResolver.<>c.<CreateResolver>b__0_0(DateTimeConverterResolver`1 resolver, DateTime value, Nullable`1 expectedPgTypeId)
   at Npgsql.Internal.Converters.DateTimeConverterResolver`1.Get(T value, Nullable`1 expectedPgTypeId)
   at Npgsql.Internal.PgConverterResolver`1.GetAsObjectInternal(PgTypeInfo typeInfo, Object value, Nullable`1 expectedPgTypeId)
   at Npgsql.Internal.PgResolverTypeInfo.GetResolutionAsObject(Object value, Nullable`1 expectedPgTypeId)
   at Npgsql.Internal.PgTypeInfo.GetObjectResolution(Object value)
   at Npgsql.NpgsqlParameter.ResolveConverter(PgTypeInfo typeInfo)
   at Npgsql.NpgsqlParameter.ResolveTypeInfo(PgSerializerOptions options)
   at Npgsql.NpgsqlParameterCollection.ProcessParameters(PgSerializerOptions options, Boolean validateValues, CommandType commandType)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)
   at Npgsql.NpgsqlCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(IEnumerable`1 commandBatches, IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(StateManager stateManager, Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at BookTicketCommandHandler.Handle(BookTicketCommand request, CancellationToken cancellationToken) in D:\WorkingSpace\Repository\ExamAcceloka-Hansel\HanselAcceloka\Application\BookTickets\Commands\BookTicketCommandHandler.cs:line 34
   at BookTicketController.BookTicket(BookTicketRequest request) in D:\WorkingSpace\Repository\ExamAcceloka-Hansel\HanselAcceloka\Controllers\BookTicketController.cs:line 19
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask`1 actionResultValueTask)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2025-03-11 10:01:58.748 +07:00 [INF] Request finished HTTP/2 POST https://localhost:5105/api/v1/book-ticket - 500 null text/plain; charset=utf-8 1645.2006ms
2025-03-11 10:03:38.413 +07:00 [INF] Now listening on: https://localhost:5105
2025-03-11 10:03:38.541 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2025-03-11 10:03:38.541 +07:00 [INF] Hosting environment: Development
2025-03-11 10:03:38.541 +07:00 [INF] Content root path: D:\WorkingSpace\Repository\ExamAcceloka-Hansel\HanselAcceloka
2025-03-11 10:03:39.302 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/index.html - null null
2025-03-11 10:03:39.675 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/index.html - 200 null text/html;charset=utf-8 383.8838ms
2025-03-11 10:03:39.756 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/_vs/browserLink - null null
2025-03-11 10:03:39.756 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/_framework/aspnetcore-browser-refresh.js - null null
2025-03-11 10:03:39.763 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/_framework/aspnetcore-browser-refresh.js - 200 13764 application/javascript; charset=utf-8 16.641ms
2025-03-11 10:03:39.876 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/_vs/browserLink - 200 null text/javascript; charset=UTF-8 123.0848ms
2025-03-11 10:03:39.957 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/swagger/v1/swagger.json - null null
2025-03-11 10:03:39.975 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 18.141ms
2025-03-11 10:03:52.804 +07:00 [INF] Request starting HTTP/2 POST https://localhost:5105/api/v1/book-ticket - application/json 82
2025-03-11 10:03:52.810 +07:00 [INF] CORS policy execution successful.
2025-03-11 10:03:52.813 +07:00 [INF] Executing endpoint 'BookTicketController.BookTicket (HanselAcceloka)'
2025-03-11 10:03:52.830 +07:00 [INF] Route matched with {action = "BookTicket", controller = "BookTicket"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] BookTicket(HanselAcceloka.Models.Requests.BookTicketRequest) on controller BookTicketController (HanselAcceloka).
2025-03-11 10:03:52.911 +07:00 [WRN] 'AddEntityFramework*' was called on the service provider, but 'UseInternalServiceProvider' wasn't called in the DbContext options configuration. Consider removing the 'AddEntityFramework*' call, as in most cases it's not needed and may cause conflicts with other products and services registered in the same service provider.
2025-03-11 10:03:53.877 +07:00 [INF] Executed DbCommand (73ms) [Parameters=[@__ticketCodes_0='?' (DbType = Object)], CommandType='"Text"', CommandTimeout='30']
SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name, c.category_id, c.category_name
FROM ticket AS t
INNER JOIN category AS c ON t.category_id = c.category_id
WHERE t.ticket_code = ANY (@__ticketCodes_0)
2025-03-11 10:03:54.030 +07:00 [INF] Executed DbCommand (11ms) [Parameters=[@p0='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO bookedticket (booked_at)
VALUES (@p0)
RETURNING booked_ticket_id;
2025-03-11 10:03:54.051 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[@p1='?', @p0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
UPDATE ticket SET quota = @p0
WHERE ticket_code = @p1;
2025-03-11 10:03:54.059 +07:00 [INF] Executing OkObjectResult, writing value of type 'HanselAcceloka.Models.Responses.BookTicketResponse'.
2025-03-11 10:03:54.071 +07:00 [INF] Executed action BookTicketController.BookTicket (HanselAcceloka) in 1237.6186ms
2025-03-11 10:03:54.071 +07:00 [INF] Executed endpoint 'BookTicketController.BookTicket (HanselAcceloka)'
2025-03-11 10:03:54.073 +07:00 [INF] HTTP POST /api/v1/book-ticket responded 200 in 1263.8345 ms
2025-03-11 10:03:54.079 +07:00 [INF] Request finished HTTP/2 POST https://localhost:5105/api/v1/book-ticket - 200 null application/json; charset=utf-8 1274.5149ms
2025-03-11 16:27:49.592 +07:00 [INF] Now listening on: https://localhost:5105
2025-03-11 16:27:49.692 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2025-03-11 16:27:49.692 +07:00 [INF] Hosting environment: Development
2025-03-11 16:27:49.692 +07:00 [INF] Content root path: D:\WorkingSpace\Repository\ExamAcceloka-Hansel\HanselAcceloka
2025-03-11 16:27:50.247 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/index.html - null null
2025-03-11 16:27:50.578 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/index.html - 200 null text/html;charset=utf-8 341.0048ms
2025-03-11 16:27:50.757 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/_framework/aspnetcore-browser-refresh.js - null null
2025-03-11 16:27:50.773 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/_vs/browserLink - null null
2025-03-11 16:27:50.773 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/_framework/aspnetcore-browser-refresh.js - 200 13764 application/javascript; charset=utf-8 16.5436ms
2025-03-11 16:27:50.874 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/_vs/browserLink - 200 null text/javascript; charset=UTF-8 101.1633ms
2025-03-11 16:27:51.025 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/swagger/v1/swagger.json - null null
2025-03-11 16:27:51.053 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 28.0403ms
2025-03-11 16:30:02.569 +07:00 [INF] Now listening on: https://localhost:5105
2025-03-11 16:30:02.668 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2025-03-11 16:30:02.668 +07:00 [INF] Hosting environment: Development
2025-03-11 16:30:02.668 +07:00 [INF] Content root path: D:\WorkingSpace\Repository\ExamAcceloka-Hansel\HanselAcceloka
2025-03-11 16:30:03.239 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/index.html - null null
2025-03-11 16:30:03.476 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/index.html - 200 null text/html;charset=utf-8 244.515ms
2025-03-11 16:30:03.570 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/_framework/aspnetcore-browser-refresh.js - null null
2025-03-11 16:30:03.570 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/_vs/browserLink - null null
2025-03-11 16:30:03.581 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/_framework/aspnetcore-browser-refresh.js - 200 13764 application/javascript; charset=utf-8 12.1359ms
2025-03-11 16:30:03.666 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/_vs/browserLink - 200 null text/javascript; charset=UTF-8 97.5086ms
2025-03-11 16:30:03.758 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/swagger/v1/swagger.json - null null
2025-03-11 16:30:03.780 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 22.5541ms
2025-03-11 16:30:10.819 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - null null
2025-03-11 16:30:10.839 +07:00 [INF] Executing endpoint 'HanselAcceloka.Controllers.TicketController.Get (HanselAcceloka)'
2025-03-11 16:30:10.868 +07:00 [INF] Route matched with {action = "Get", controller = "Ticket"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(GetAvailableTicketsQuery) on controller HanselAcceloka.Controllers.TicketController (HanselAcceloka).
2025-03-11 16:32:45.791 +07:00 [INF] Now listening on: https://localhost:5105
2025-03-11 16:32:45.983 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2025-03-11 16:32:45.984 +07:00 [INF] Hosting environment: Development
2025-03-11 16:32:45.984 +07:00 [INF] Content root path: D:\WorkingSpace\Repository\ExamAcceloka-Hansel\HanselAcceloka
2025-03-11 16:32:46.543 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/index.html - null null
2025-03-11 16:32:46.857 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/index.html - 200 null text/html;charset=utf-8 324.3703ms
2025-03-11 16:32:46.943 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/_vs/browserLink - null null
2025-03-11 16:32:46.943 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/_framework/aspnetcore-browser-refresh.js - null null
2025-03-11 16:32:46.953 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/_framework/aspnetcore-browser-refresh.js - 200 13764 application/javascript; charset=utf-8 10.5265ms
2025-03-11 16:32:47.026 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/_vs/browserLink - 200 null text/javascript; charset=UTF-8 83.8611ms
2025-03-11 16:32:47.172 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/swagger/v1/swagger.json - null null
2025-03-11 16:32:47.204 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 32.3744ms
2025-03-11 16:32:48.187 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/favicon-32x32.png - null null
2025-03-11 16:32:48.200 +07:00 [INF] Sending file. Request path: '/favicon-32x32.png'. Physical path: 'N/A'
2025-03-11 16:32:48.200 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/favicon-32x32.png - 200 628 image/png 13.7647ms
2025-03-11 16:33:00.335 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - null null
2025-03-11 16:33:00.351 +07:00 [INF] Executing endpoint 'HanselAcceloka.Controllers.TicketController.Get (HanselAcceloka)'
2025-03-11 16:33:00.373 +07:00 [INF] Route matched with {action = "Get", controller = "Ticket"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(GetAvailableTicketsQuery) on controller HanselAcceloka.Controllers.TicketController (HanselAcceloka).
2025-03-11 16:36:23.937 +07:00 [INF] Now listening on: https://localhost:5105
2025-03-11 16:36:24.013 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2025-03-11 16:36:24.013 +07:00 [INF] Hosting environment: Development
2025-03-11 16:36:24.013 +07:00 [INF] Content root path: D:\WorkingSpace\Repository\ExamAcceloka-Hansel\HanselAcceloka
2025-03-11 16:36:24.714 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/index.html - null null
2025-03-11 16:36:24.978 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/index.html - 200 null text/html;charset=utf-8 273.756ms
2025-03-11 16:36:25.078 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/_vs/browserLink - null null
2025-03-11 16:36:25.078 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/_framework/aspnetcore-browser-refresh.js - null null
2025-03-11 16:36:25.085 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/_framework/aspnetcore-browser-refresh.js - 200 13764 application/javascript; charset=utf-8 7.5785ms
2025-03-11 16:36:25.145 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/_vs/browserLink - 200 null text/javascript; charset=UTF-8 67.8708ms
2025-03-11 16:36:25.301 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/swagger/v1/swagger.json - null null
2025-03-11 16:36:25.336 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 42.9764ms
2025-03-11 16:37:04.614 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - null null
2025-03-11 16:37:04.631 +07:00 [INF] Executing endpoint 'HanselAcceloka.Controllers.TicketController.Get (HanselAcceloka)'
2025-03-11 16:37:04.652 +07:00 [INF] Route matched with {action = "Get", controller = "Ticket"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(GetAvailableTicketsQuery) on controller HanselAcceloka.Controllers.TicketController (HanselAcceloka).
2025-03-11 16:37:04.709 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 16:37:04.729 +07:00 [INF] Executed action HanselAcceloka.Controllers.TicketController.Get (HanselAcceloka) in 74.0603ms
2025-03-11 16:37:04.729 +07:00 [INF] Executed endpoint 'HanselAcceloka.Controllers.TicketController.Get (HanselAcceloka)'
2025-03-11 16:37:04.730 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 101.1134 ms
2025-03-11 16:37:04.731 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - 400 null application/problem+json; charset=utf-8 116.6331ms
2025-03-11 17:37:05.958 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - null null
2025-03-11 17:37:05.989 +07:00 [INF] Executing endpoint 'HanselAcceloka.Controllers.TicketController.Get (HanselAcceloka)'
2025-03-11 17:37:05.989 +07:00 [INF] Route matched with {action = "Get", controller = "Ticket"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(GetAvailableTicketsQuery) on controller HanselAcceloka.Controllers.TicketController (HanselAcceloka).
2025-03-11 17:37:05.991 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 17:37:05.991 +07:00 [INF] Executed action HanselAcceloka.Controllers.TicketController.Get (HanselAcceloka) in 2.4571ms
2025-03-11 17:37:05.992 +07:00 [INF] Executed endpoint 'HanselAcceloka.Controllers.TicketController.Get (HanselAcceloka)'
2025-03-11 17:37:05.992 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 3.3113 ms
2025-03-11 17:37:05.992 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - 400 null application/problem+json; charset=utf-8 34.0892ms
2025-03-11 17:39:58.204 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - null null
2025-03-11 17:39:58.242 +07:00 [INF] Executing endpoint 'HanselAcceloka.Controllers.TicketController.Get (HanselAcceloka)'
2025-03-11 17:39:58.243 +07:00 [INF] Route matched with {action = "Get", controller = "Ticket"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] Get(GetAvailableTicketsQuery) on controller HanselAcceloka.Controllers.TicketController (HanselAcceloka).
2025-03-11 17:39:58.244 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 17:39:58.245 +07:00 [INF] Executed action HanselAcceloka.Controllers.TicketController.Get (HanselAcceloka) in 1.8334ms
2025-03-11 17:39:58.245 +07:00 [INF] Executed endpoint 'HanselAcceloka.Controllers.TicketController.Get (HanselAcceloka)'
2025-03-11 17:39:58.245 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 39.2522 ms
2025-03-11 17:39:58.245 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - 400 null application/problem+json; charset=utf-8 42.651ms
2025-03-11 18:02:19.653 +07:00 [INF] Now listening on: https://localhost:5105
2025-03-11 18:02:19.747 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2025-03-11 18:02:19.747 +07:00 [INF] Hosting environment: Development
2025-03-11 18:02:19.747 +07:00 [INF] Content root path: D:\WorkingSpace\Repository\ExamAcceloka-Hansel\HanselAcceloka
2025-03-11 18:02:20.126 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/index.html - null null
2025-03-11 18:02:20.468 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/index.html - 200 null text/html;charset=utf-8 351.5841ms
2025-03-11 18:02:20.546 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/_framework/aspnetcore-browser-refresh.js - null null
2025-03-11 18:02:20.546 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/_vs/browserLink - null null
2025-03-11 18:02:20.553 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/_framework/aspnetcore-browser-refresh.js - 200 13764 application/javascript; charset=utf-8 8.274ms
2025-03-11 18:02:20.595 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/_vs/browserLink - 200 null text/javascript; charset=UTF-8 50.4622ms
2025-03-11 18:02:20.680 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/swagger/v1/swagger.json - null null
2025-03-11 18:02:20.701 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 20.6842ms
2025-03-11 18:02:30.553 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - null null
2025-03-11 18:02:30.571 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:02:30.590 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 18:02:30.696 +07:00 [WRN] 'AddEntityFramework*' was called on the service provider, but 'UseInternalServiceProvider' wasn't called in the DbContext options configuration. Consider removing the 'AddEntityFramework*' call, as in most cases it's not needed and may cause conflicts with other products and services registered in the same service provider.
2025-03-11 18:02:31.524 +07:00 [INF] Executed DbCommand (17ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 18:02:31.577 +07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-11 18:02:31.577 +07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-11 18:02:31.626 +07:00 [INF] Executed DbCommand (7ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 18:02:31.641 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 18:02:31.651 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 1057.9161ms
2025-03-11 18:02:31.652 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:02:31.653 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 1084.3307 ms
2025-03-11 18:02:31.659 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - 200 null application/json; charset=utf-8 1105.946ms
2025-03-11 18:02:54.100 +07:00 [INF] Request starting HTTP/2 POST https://localhost:5105/api/v1/book-ticket - application/json 83
2025-03-11 18:02:54.104 +07:00 [INF] CORS policy execution successful.
2025-03-11 18:02:54.104 +07:00 [INF] Executing endpoint 'BookTicketController.BookTicket (HanselAcceloka)'
2025-03-11 18:02:54.108 +07:00 [INF] Route matched with {action = "BookTicket", controller = "BookTicket"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] BookTicket(HanselAcceloka.Models.Requests.BookTicketRequest) on controller BookTicketController (HanselAcceloka).
2025-03-11 18:02:54.144 +07:00 [INF] Executed action BookTicketController.BookTicket (HanselAcceloka) in 35.3834ms
2025-03-11 18:02:54.145 +07:00 [INF] Executed endpoint 'BookTicketController.BookTicket (HanselAcceloka)'
2025-03-11 18:02:54.145 +07:00 [ERR] HTTP POST /api/v1/book-ticket responded 500 in 43.2449 ms
FluentValidation.AsyncValidatorInvokedSynchronouslyException: Validator "BookTicketValidator" can't be used with ASP.NET automatic validation as it contains asynchronous rules. ASP.NET's validation pipeline is not asynchronous and can't invoke asynchronous rules. Remove the asynchronous rules in order for this validator to run.
   at FluentValidation.AbstractValidator`1.Validate(ValidationContext`1 context) in /_/src/FluentValidation/AbstractValidator.cs:line 207
   at FluentValidation.AbstractValidator`1.FluentValidation.IValidator.Validate(IValidationContext context) in /_/src/FluentValidation/AbstractValidator.cs:line 153
   at FluentValidation.AspNetCore.FluentValidationModelValidator.Validate(ModelValidationContext mvContext) in /_/src/FluentValidation.AspNetCore/FluentValidationModelValidatorProvider.cs:line 146
   at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.ValidateNode()
   at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.VisitComplexType(IValidationStrategy defaultStrategy)
   at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.VisitImplementation(ModelMetadata& metadata, String& key, Object model)
   at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Visit(ModelMetadata metadata, String key, Object model)
   at FluentValidation.AspNetCore.FluentValidationVisitor.<>n__1(ModelMetadata metadata, String key, Object model, Boolean alwaysValidateAtTopLevel, Object container)
   at FluentValidation.AspNetCore.FluentValidationVisitor.<>c__DisplayClass2_0.<Validate>g__BaseValidate|0() in /_/src/FluentValidation.AspNetCore/FluentValidationVisitor.cs:line 45
   at FluentValidation.AspNetCore.FluentValidationVisitor.ValidateInternal(ModelMetadata metadata, String key, Object model, Func`1 continuation) in /_/src/FluentValidation.AspNetCore/FluentValidationVisitor.cs:line 63
   at FluentValidation.AspNetCore.FluentValidationVisitor.Validate(ModelMetadata metadata, String key, Object model, Boolean alwaysValidateAtTopLevel, Object container) in /_/src/FluentValidation.AspNetCore/FluentValidationVisitor.cs:line 47
   at Microsoft.AspNetCore.Mvc.ModelBinding.ObjectModelValidator.Validate(ActionContext actionContext, ValidationStateDictionary validationState, String prefix, Object model, ModelMetadata metadata, Object container)
   at Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.EnforceBindRequiredAndValidate(ObjectModelValidator baseObjectValidator, ActionContext actionContext, ParameterDescriptor parameter, ModelMetadata metadata, ModelBindingContext modelBindingContext, ModelBindingResult modelBindingResult, Object container)
   at Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.BindModelAsync(ActionContext actionContext, IModelBinder modelBinder, IValueProvider valueProvider, ParameterDescriptor parameter, ModelMetadata metadata, Object value, Object container)
   at Microsoft.AspNetCore.Mvc.Controllers.ControllerBinderDelegateProvider.<>c__DisplayClass0_0.<<CreateBinderDelegate>g__Bind|0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
2025-03-11 18:02:54.185 +07:00 [ERR] An unhandled exception has occurred while executing the request.
FluentValidation.AsyncValidatorInvokedSynchronouslyException: Validator "BookTicketValidator" can't be used with ASP.NET automatic validation as it contains asynchronous rules. ASP.NET's validation pipeline is not asynchronous and can't invoke asynchronous rules. Remove the asynchronous rules in order for this validator to run.
   at FluentValidation.AbstractValidator`1.Validate(ValidationContext`1 context) in /_/src/FluentValidation/AbstractValidator.cs:line 207
   at FluentValidation.AbstractValidator`1.FluentValidation.IValidator.Validate(IValidationContext context) in /_/src/FluentValidation/AbstractValidator.cs:line 153
   at FluentValidation.AspNetCore.FluentValidationModelValidator.Validate(ModelValidationContext mvContext) in /_/src/FluentValidation.AspNetCore/FluentValidationModelValidatorProvider.cs:line 146
   at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.ValidateNode()
   at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.VisitComplexType(IValidationStrategy defaultStrategy)
   at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.VisitImplementation(ModelMetadata& metadata, String& key, Object model)
   at Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Visit(ModelMetadata metadata, String key, Object model)
   at FluentValidation.AspNetCore.FluentValidationVisitor.<>n__1(ModelMetadata metadata, String key, Object model, Boolean alwaysValidateAtTopLevel, Object container)
   at FluentValidation.AspNetCore.FluentValidationVisitor.<>c__DisplayClass2_0.<Validate>g__BaseValidate|0() in /_/src/FluentValidation.AspNetCore/FluentValidationVisitor.cs:line 45
   at FluentValidation.AspNetCore.FluentValidationVisitor.ValidateInternal(ModelMetadata metadata, String key, Object model, Func`1 continuation) in /_/src/FluentValidation.AspNetCore/FluentValidationVisitor.cs:line 63
   at FluentValidation.AspNetCore.FluentValidationVisitor.Validate(ModelMetadata metadata, String key, Object model, Boolean alwaysValidateAtTopLevel, Object container) in /_/src/FluentValidation.AspNetCore/FluentValidationVisitor.cs:line 47
   at Microsoft.AspNetCore.Mvc.ModelBinding.ObjectModelValidator.Validate(ActionContext actionContext, ValidationStateDictionary validationState, String prefix, Object model, ModelMetadata metadata, Object container)
   at Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.EnforceBindRequiredAndValidate(ObjectModelValidator baseObjectValidator, ActionContext actionContext, ParameterDescriptor parameter, ModelMetadata metadata, ModelBindingContext modelBindingContext, ModelBindingResult modelBindingResult, Object container)
   at Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.BindModelAsync(ActionContext actionContext, IModelBinder modelBinder, IValueProvider valueProvider, ParameterDescriptor parameter, ModelMetadata metadata, Object value, Object container)
   at Microsoft.AspNetCore.Mvc.Controllers.ControllerBinderDelegateProvider.<>c__DisplayClass0_0.<<CreateBinderDelegate>g__Bind|0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Serilog.AspNetCore.RequestLoggingMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2025-03-11 18:02:54.194 +07:00 [INF] Request finished HTTP/2 POST https://localhost:5105/api/v1/book-ticket - 500 null text/plain; charset=utf-8 93.4712ms
2025-03-11 18:17:37.054 +07:00 [INF] Now listening on: https://localhost:5105
2025-03-11 18:17:37.137 +07:00 [INF] Application started. Press Ctrl+C to shut down.
2025-03-11 18:17:37.138 +07:00 [INF] Hosting environment: Development
2025-03-11 18:17:37.138 +07:00 [INF] Content root path: D:\WorkingSpace\Repository\ExamAcceloka-Hansel\HanselAcceloka
2025-03-11 18:17:37.869 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/index.html - null null
2025-03-11 18:17:38.057 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/index.html - 200 null text/html;charset=utf-8 198.1127ms
2025-03-11 18:17:52.754 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/_framework/aspnetcore-browser-refresh.js - null null
2025-03-11 18:17:52.754 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/_vs/browserLink - null null
2025-03-11 18:17:52.764 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/_framework/aspnetcore-browser-refresh.js - 200 13764 application/javascript; charset=utf-8 10.7534ms
2025-03-11 18:17:52.804 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/_vs/browserLink - 200 null text/javascript; charset=UTF-8 51.33ms
2025-03-11 18:17:52.887 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/swagger/v1/swagger.json - null null
2025-03-11 18:17:52.909 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 22.7366ms
2025-03-11 18:18:11.203 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - null null
2025-03-11 18:18:11.220 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:18:11.239 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 18:18:11.334 +07:00 [WRN] 'AddEntityFramework*' was called on the service provider, but 'UseInternalServiceProvider' wasn't called in the DbContext options configuration. Consider removing the 'AddEntityFramework*' call, as in most cases it's not needed and may cause conflicts with other products and services registered in the same service provider.
2025-03-11 18:18:12.111 +07:00 [INF] Executed DbCommand (14ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 18:18:12.161 +07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-11 18:18:12.161 +07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-11 18:18:12.210 +07:00 [INF] Executed DbCommand (8ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 18:18:12.223 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 18:18:12.232 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 991.041ms
2025-03-11 18:18:12.233 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:18:12.234 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 1016.1195 ms
2025-03-11 18:18:12.240 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - 200 null application/json; charset=utf-8 1037.1462ms
2025-03-11 18:18:27.979 +07:00 [INF] Request starting HTTP/2 POST https://localhost:5105/api/v1/book-ticket - application/json 83
2025-03-11 18:18:27.982 +07:00 [INF] CORS policy execution successful.
2025-03-11 18:18:27.983 +07:00 [INF] Executing endpoint 'BookTicketController.BookTicket (HanselAcceloka)'
2025-03-11 18:18:27.987 +07:00 [INF] Route matched with {action = "BookTicket", controller = "BookTicket"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] BookTicket(HanselAcceloka.Models.Requests.BookTicketRequest) on controller BookTicketController (HanselAcceloka).
2025-03-11 18:18:28.042 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
FROM ticket AS t
2025-03-11 18:18:28.145 +07:00 [INF] Executed DbCommand (36ms) [Parameters=[@__ticketCodes_0='?' (DbType = Object)], CommandType='"Text"', CommandTimeout='30']
SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name, c.category_id, c.category_name
FROM ticket AS t
INNER JOIN category AS c ON t.category_id = c.category_id
WHERE t.ticket_code = ANY (@__ticketCodes_0)
2025-03-11 18:18:28.235 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO bookedticket (booked_at)
VALUES (@p0)
RETURNING booked_ticket_id;
2025-03-11 18:18:28.280 +07:00 [INF] Executed DbCommand (7ms) [Parameters=[@p0='?' (DbType = Int32), @p1='?' (DbType = Int32), @p2='?', @p4='?', @p3='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO bookedticketdetail (booked_ticket_id, quantity, ticket_code)
VALUES (@p0, @p1, @p2)
RETURNING booked_ticket_detail_id;
UPDATE ticket SET quota = @p3
WHERE ticket_code = @p4;
2025-03-11 18:18:28.293 +07:00 [INF] Executing OkObjectResult, writing value of type 'HanselAcceloka.Models.Responses.BookTicketResponse'.
2025-03-11 18:18:28.299 +07:00 [INF] Executed action BookTicketController.BookTicket (HanselAcceloka) in 312.0085ms
2025-03-11 18:18:28.299 +07:00 [INF] Executed endpoint 'BookTicketController.BookTicket (HanselAcceloka)'
2025-03-11 18:18:28.299 +07:00 [INF] HTTP POST /api/v1/book-ticket responded 200 in 317.9634 ms
2025-03-11 18:18:28.299 +07:00 [INF] Request finished HTTP/2 POST https://localhost:5105/api/v1/book-ticket - 200 null application/json; charset=utf-8 320.0053ms
2025-03-11 18:39:51.244 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10 - null null
2025-03-11 18:39:51.245 +07:00 [INF] CORS policy execution successful.
2025-03-11 18:39:51.246 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:39:51.246 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 18:39:51.388 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 18:39:51.392 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 18:39:51.392 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 18:39:51.393 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 146.4467ms
2025-03-11 18:39:51.393 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:39:51.393 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 147.6421 ms
2025-03-11 18:39:51.393 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10 - 200 null application/json; charset=utf-8 148.4591ms
2025-03-11 18:39:51.394 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10 - null null
2025-03-11 18:39:51.394 +07:00 [INF] CORS policy execution successful.
2025-03-11 18:39:51.394 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:39:51.394 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 18:39:51.399 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 18:39:51.401 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 18:39:51.403 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 18:39:51.404 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 9.6112ms
2025-03-11 18:39:51.404 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:39:51.404 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 9.8602 ms
2025-03-11 18:39:51.404 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10 - 200 null application/json; charset=utf-8 10.4607ms
2025-03-11 18:39:55.400 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10 - null null
2025-03-11 18:39:55.400 +07:00 [INF] CORS policy execution successful.
2025-03-11 18:39:55.400 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:39:55.400 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 18:39:55.405 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 18:39:55.408 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 18:39:55.409 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 18:39:55.409 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 8.9201ms
2025-03-11 18:39:55.410 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:39:55.410 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 9.5190 ms
2025-03-11 18:39:55.410 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10 - 200 null application/json; charset=utf-8 10.5893ms
2025-03-11 18:40:04.726 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10 - null null
2025-03-11 18:40:04.726 +07:00 [INF] CORS policy execution successful.
2025-03-11 18:40:04.726 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:40:04.726 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 18:40:04.729 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 18:40:04.733 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 18:40:04.734 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 18:40:04.734 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 7.4502ms
2025-03-11 18:40:04.734 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:40:04.734 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 7.6626 ms
2025-03-11 18:40:04.734 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10 - 200 null application/json; charset=utf-8 8.3141ms
2025-03-11 18:40:04.735 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10 - null null
2025-03-11 18:40:04.735 +07:00 [INF] CORS policy execution successful.
2025-03-11 18:40:04.735 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:40:04.735 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 18:40:04.738 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 18:40:04.741 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 18:40:04.741 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 18:40:04.742 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 6.1465ms
2025-03-11 18:40:04.742 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:40:04.742 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 6.3493 ms
2025-03-11 18:40:04.742 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10 - 200 null application/json; charset=utf-8 6.8319ms
2025-03-11 18:44:07.591 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=[object%20Object]&pageSize=10 - null null
2025-03-11 18:44:07.592 +07:00 [INF] CORS policy execution successful.
2025-03-11 18:44:07.593 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:44:07.593 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 18:44:07.601 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 18:44:07.616 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 22.3794ms
2025-03-11 18:44:07.616 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:44:07.616 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 23.9300 ms
2025-03-11 18:44:07.616 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=[object%20Object]&pageSize=10 - 400 null application/problem+json; charset=utf-8 24.9117ms
2025-03-11 18:53:05.694 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - null null
2025-03-11 18:53:05.695 +07:00 [INF] CORS policy execution successful.
2025-03-11 18:53:05.696 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:53:05.698 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 18:53:05.711 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 18:53:05.711 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 12.445ms
2025-03-11 18:53:05.711 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:53:05.711 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 16.5155 ms
2025-03-11 18:53:05.711 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - 400 null application/problem+json; charset=utf-8 17.0281ms
2025-03-11 18:53:05.712 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - null null
2025-03-11 18:53:05.712 +07:00 [INF] CORS policy execution successful.
2025-03-11 18:53:05.713 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:53:05.713 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 18:53:05.713 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 18:53:05.714 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.9015ms
2025-03-11 18:53:05.714 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:53:05.714 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 1.0870 ms
2025-03-11 18:53:05.714 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - 400 null application/problem+json; charset=utf-8 1.4389ms
2025-03-11 18:53:16.096 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - null null
2025-03-11 18:53:16.096 +07:00 [INF] CORS policy execution successful.
2025-03-11 18:53:16.096 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:53:16.096 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 18:53:16.097 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 18:53:16.097 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 1.3109ms
2025-03-11 18:53:16.097 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 18:53:16.097 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 1.5129 ms
2025-03-11 18:53:16.098 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - 400 null application/problem+json; charset=utf-8 1.8956ms
2025-03-11 19:00:08.808 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - null null
2025-03-11 19:00:08.808 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:00:08.808 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:00:08.810 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:00:08.813 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:00:08.813 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.3999ms
2025-03-11 19:00:08.813 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:00:08.813 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 4.8082 ms
2025-03-11 19:00:08.813 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - 400 null application/problem+json; charset=utf-8 5.7038ms
2025-03-11 19:01:43.086 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - null null
2025-03-11 19:01:43.088 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:01:43.088 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:01:43.089 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:01:43.090 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:01:43.090 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 1.0745ms
2025-03-11 19:01:43.090 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:01:43.090 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 2.1391 ms
2025-03-11 19:01:43.090 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - 400 null application/problem+json; charset=utf-8 4.2208ms
2025-03-11 19:01:58.562 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - null null
2025-03-11 19:01:58.563 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:01:58.565 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:01:58.639 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:01:58.641 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:01:58.641 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:01:58.641 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 76.5823ms
2025-03-11 19:01:58.641 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:01:58.641 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 78.3029 ms
2025-03-11 19:01:58.641 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - 200 null application/json; charset=utf-8 79.3896ms
2025-03-11 19:03:33.678 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - null null
2025-03-11 19:03:33.679 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:03:33.680 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:03:33.680 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:03:33.684 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:03:33.684 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.7717ms
2025-03-11 19:03:33.685 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:03:33.685 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 5.8277 ms
2025-03-11 19:03:33.685 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - 400 null application/problem+json; charset=utf-8 6.5622ms
2025-03-11 19:03:33.686 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - null null
2025-03-11 19:03:33.686 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:03:33.686 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:03:33.686 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:03:33.687 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:03:33.687 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 1.0769ms
2025-03-11 19:03:33.687 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:03:33.688 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 1.3257 ms
2025-03-11 19:03:33.688 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - 400 null application/problem+json; charset=utf-8 1.8584ms
2025-03-11 19:03:51.754 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - null null
2025-03-11 19:03:51.754 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:03:51.754 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:03:51.754 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:03:51.755 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:03:51.755 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 1.0174ms
2025-03-11 19:03:51.755 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:03:51.755 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 1.2795 ms
2025-03-11 19:03:51.755 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - 400 null application/problem+json; charset=utf-8 1.7607ms
2025-03-11 19:04:15.627 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - null null
2025-03-11 19:04:15.629 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:04:15.629 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:04:15.660 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:04:15.663 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:04:15.663 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:04:15.663 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 34.1482ms
2025-03-11 19:04:15.663 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:04:15.663 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 34.3910 ms
2025-03-11 19:04:15.663 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - 200 null application/json; charset=utf-8 35.9863ms
2025-03-11 19:05:13.490 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&orderBy=event_date&orderState=asc - null null
2025-03-11 19:05:13.491 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:05:13.515 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:05:13.515 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:05:13.533 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[@__request_TicketCode_0_contains='?', @__request_TicketName_1_contains='?', @__request_CategoryName_2_contains='?'], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
INNER JOIN category AS c ON t.category_id = c.category_id
WHERE t.quota > 0 AND t.ticket_code LIKE @__request_TicketCode_0_contains AND t.ticket_name LIKE @__request_TicketName_1_contains AND c.category_name LIKE @__request_CategoryName_2_contains
2025-03-11 19:05:13.535 +07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-11 19:05:13.535 +07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-11 19:05:13.537 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_TicketCode_0_contains='?', @__request_TicketName_1_contains='?', @__request_CategoryName_2_contains='?', @__p_4='?' (DbType = Int32), @__p_3='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t.ticket_code AS "TicketCode", t.ticket_name AS "TicketName", c.category_name AS "CategoryName", t.price AS "Price", t.quota AS "Quota", t.event_date AS "EventDate"
FROM ticket AS t
INNER JOIN category AS c ON t.category_id = c.category_id
WHERE t.quota > 0 AND t.ticket_code LIKE @__request_TicketCode_0_contains AND t.ticket_name LIKE @__request_TicketName_1_contains AND c.category_name LIKE @__request_CategoryName_2_contains
LIMIT @__p_4 OFFSET @__p_3
2025-03-11 19:05:13.538 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:05:13.538 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 22.4363ms
2025-03-11 19:05:13.538 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:05:13.538 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 47.2122 ms
2025-03-11 19:05:13.538 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 48.664ms
2025-03-11 19:05:16.268 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&orderBy=event_date&orderState=asc - null null
2025-03-11 19:05:16.269 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:05:16.269 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:05:16.269 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:05:16.271 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_TicketCode_0_contains='?', @__request_TicketName_1_contains='?', @__request_CategoryName_2_contains='?'], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
INNER JOIN category AS c ON t.category_id = c.category_id
WHERE t.quota > 0 AND t.ticket_code LIKE @__request_TicketCode_0_contains AND t.ticket_name LIKE @__request_TicketName_1_contains AND c.category_name LIKE @__request_CategoryName_2_contains
2025-03-11 19:05:16.274 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_TicketCode_0_contains='?', @__request_TicketName_1_contains='?', @__request_CategoryName_2_contains='?', @__p_4='?' (DbType = Int32), @__p_3='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t.ticket_code AS "TicketCode", t.ticket_name AS "TicketName", c.category_name AS "CategoryName", t.price AS "Price", t.quota AS "Quota", t.event_date AS "EventDate"
FROM ticket AS t
INNER JOIN category AS c ON t.category_id = c.category_id
WHERE t.quota > 0 AND t.ticket_code LIKE @__request_TicketCode_0_contains AND t.ticket_name LIKE @__request_TicketName_1_contains AND c.category_name LIKE @__request_CategoryName_2_contains
LIMIT @__p_4 OFFSET @__p_3
2025-03-11 19:05:16.274 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:05:16.274 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 5.3008ms
2025-03-11 19:05:16.274 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:05:16.274 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 5.4980 ms
2025-03-11 19:05:16.274 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 6.0077ms
2025-03-11 19:05:33.422 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - null null
2025-03-11 19:05:33.422 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:05:33.422 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:05:33.424 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:05:33.427 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:05:33.427 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:05:33.427 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.7776ms
2025-03-11 19:05:33.427 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:05:33.427 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 5.0136 ms
2025-03-11 19:05:33.427 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket - 200 null application/json; charset=utf-8 5.5997ms
2025-03-11 19:05:46.065 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=100000 - null null
2025-03-11 19:05:46.065 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:05:46.065 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:05:46.070 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:05:46.073 +07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-11 19:05:46.073 +07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-11 19:05:46.075 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:05:46.075 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:05:46.075 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 10.282ms
2025-03-11 19:05:46.075 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:05:46.075 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 10.4647 ms
2025-03-11 19:05:46.075 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=100000 - 200 null application/json; charset=utf-8 11.057ms
2025-03-11 19:05:52.588 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000 - null null
2025-03-11 19:05:52.589 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:05:52.589 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:05:52.591 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:05:52.594 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:05:52.594 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:05:52.594 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 5.6303ms
2025-03-11 19:05:52.594 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:05:52.594 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 5.7893 ms
2025-03-11 19:05:52.594 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000 - 200 null application/json; charset=utf-8 6.228ms
2025-03-11 19:06:00.669 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - null null
2025-03-11 19:06:00.669 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:06:00.669 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:06:00.669 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:06:00.670 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:06:00.670 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 1.0505ms
2025-03-11 19:06:00.670 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:06:00.670 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 1.2537 ms
2025-03-11 19:06:00.670 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=undefined&ticketCode=undefined&ticketName=undefined&maxPrice=undefined&startDate=undefined&endDate=undefined&orderBy=event_date&orderState=asc - 400 null application/problem+json; charset=utf-8 1.8446ms
2025-03-11 19:10:51.080 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:10:51.080 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:10:51.082 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:10:51.082 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:10:51.126 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:10:51.126 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 43.6253ms
2025-03-11 19:10:51.126 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:10:51.126 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 45.3846 ms
2025-03-11 19:10:51.126 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 46.4117ms
2025-03-11 19:12:20.009 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:12:20.009 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:12:20.009 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:12:20.009 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:12:20.010 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:12:20.010 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.6153ms
2025-03-11 19:12:20.010 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:12:20.010 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 0.8132 ms
2025-03-11 19:12:20.010 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 1.2676ms
2025-03-11 19:12:20.011 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:12:20.011 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:12:20.011 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:12:20.011 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:12:20.012 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:12:20.012 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.702ms
2025-03-11 19:12:20.012 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:12:20.012 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 1.1190 ms
2025-03-11 19:12:20.012 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 1.4381ms
2025-03-11 19:12:36.976 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:12:36.976 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:12:36.976 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:12:36.976 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:12:36.977 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:12:36.977 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.6449ms
2025-03-11 19:12:36.977 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:12:36.977 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 0.8853 ms
2025-03-11 19:12:36.977 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 1.3494ms
2025-03-11 19:12:36.979 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:12:36.979 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:12:36.979 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:12:36.979 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:12:36.980 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:12:36.980 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.6828ms
2025-03-11 19:12:36.980 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:12:36.980 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 0.9573 ms
2025-03-11 19:12:36.980 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 1.4534ms
2025-03-11 19:13:06.372 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:13:06.372 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:13:06.372 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:13:06.372 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:13:06.373 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:13:06.373 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.8027ms
2025-03-11 19:13:06.373 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:13:06.373 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 1.0638 ms
2025-03-11 19:13:06.373 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 1.8672ms
2025-03-11 19:13:06.375 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:13:06.375 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:13:06.375 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:13:06.375 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:13:06.376 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:13:06.376 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.506ms
2025-03-11 19:13:06.376 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:13:06.376 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 0.7091 ms
2025-03-11 19:13:06.376 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 0.9541ms
2025-03-11 19:13:12.837 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:13:12.837 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:13:12.837 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:13:12.837 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:13:12.838 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:13:12.839 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.9898ms
2025-03-11 19:13:12.839 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:13:12.839 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 1.2630 ms
2025-03-11 19:13:12.839 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 1.9881ms
2025-03-11 19:13:12.840 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:13:12.840 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:13:12.840 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:13:12.840 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:13:12.841 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:13:12.841 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.3791ms
2025-03-11 19:13:12.841 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:13:12.841 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 0.5319 ms
2025-03-11 19:13:12.841 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 0.8017ms
2025-03-11 19:16:39.788 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:16:39.788 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:16:39.788 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:16:39.788 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:16:39.825 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:16:39.825 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 36.4846ms
2025-03-11 19:16:39.825 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:16:39.825 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 37.1087 ms
2025-03-11 19:16:39.825 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 37.6458ms
2025-03-11 19:16:42.203 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:16:42.203 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:16:42.203 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:16:42.203 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:16:42.204 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:16:42.204 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.7505ms
2025-03-11 19:16:42.204 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:16:42.204 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 0.9801 ms
2025-03-11 19:16:42.204 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 1.4492ms
2025-03-11 19:16:42.205 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:16:42.205 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:16:42.205 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:16:42.205 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:16:42.206 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:16:42.206 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.4735ms
2025-03-11 19:16:42.206 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:16:42.206 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 0.6601 ms
2025-03-11 19:16:42.206 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 1.0893ms
2025-03-11 19:19:20.649 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:19:20.650 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:19:20.650 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:19:20.650 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:19:20.655 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:19:20.655 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.0566ms
2025-03-11 19:19:20.655 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:19:20.655 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 5.8740 ms
2025-03-11 19:19:20.655 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 6.127ms
2025-03-11 19:19:20.656 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:19:20.657 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:19:20.657 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:19:20.657 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:19:20.657 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:19:20.657 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.3672ms
2025-03-11 19:19:20.657 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:19:20.657 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 0.4978 ms
2025-03-11 19:19:20.657 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 0.8047ms
2025-03-11 19:19:21.880 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=2&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:19:21.880 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:19:21.880 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:19:21.880 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:19:21.880 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:19:21.880 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.3816ms
2025-03-11 19:19:21.880 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:19:21.880 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 0.5625 ms
2025-03-11 19:19:21.880 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=2&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 0.9644ms
2025-03-11 19:19:22.768 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:19:22.768 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:19:22.768 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:19:22.768 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:19:22.769 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:19:22.769 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.5585ms
2025-03-11 19:19:22.769 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:19:22.769 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 0.7613 ms
2025-03-11 19:19:22.769 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 1.2275ms
2025-03-11 19:24:26.961 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:24:26.962 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:24:26.962 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:24:26.963 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:24:26.988 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:24:26.988 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 25.8019ms
2025-03-11 19:24:26.988 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:24:26.989 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 26.9782 ms
2025-03-11 19:24:26.989 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 27.5521ms
2025-03-11 19:24:47.999 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:24:47.999 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:24:47.999 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:24:47.999 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:24:48.004 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:24:48.006 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 6.5367ms
2025-03-11 19:24:48.006 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:24:48.006 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 6.7718 ms
2025-03-11 19:24:48.006 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 7.3065ms
2025-03-11 19:24:48.007 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - null null
2025-03-11 19:24:48.007 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:24:48.007 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:24:48.007 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:24:48.008 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:24:48.008 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.5889ms
2025-03-11 19:24:48.008 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:24:48.008 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 0.8118 ms
2025-03-11 19:24:48.008 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticketCode&orderState=asc - 400 null application/problem+json; charset=utf-8 1.1424ms
2025-03-11 19:25:16.223 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - null null
2025-03-11 19:25:16.223 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:16.223 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:16.224 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:16.334 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:25:16.335 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:16.336 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:16.336 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 112.1715ms
2025-03-11 19:25:16.336 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:16.336 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 112.9501 ms
2025-03-11 19:25:16.336 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 113.6356ms
2025-03-11 19:25:20.086 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - null null
2025-03-11 19:25:20.086 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:20.086 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:20.086 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:20.088 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:25:20.090 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:20.090 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:20.090 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.3419ms
2025-03-11 19:25:20.091 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:20.091 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.7072 ms
2025-03-11 19:25:20.091 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 5.1561ms
2025-03-11 19:25:25.678 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - null null
2025-03-11 19:25:25.679 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:25.679 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:25.679 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:25.681 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:25:25.683 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:25.684 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:25.684 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.7393ms
2025-03-11 19:25:25.684 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:25.684 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.9849 ms
2025-03-11 19:25:25.684 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 5.5446ms
2025-03-11 19:25:28.862 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:25:28.862 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:28.862 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:28.862 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:28.864 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:25:28.866 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:28.866 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:28.866 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.2518ms
2025-03-11 19:25:28.866 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:28.866 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.4025 ms
2025-03-11 19:25:28.866 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.8289ms
2025-03-11 19:25:29.590 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:25:29.590 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:29.590 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:29.590 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:29.591 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:25:29.593 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:29.594 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:29.594 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.6859ms
2025-03-11 19:25:29.594 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:29.594 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.8107 ms
2025-03-11 19:25:29.594 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.2201ms
2025-03-11 19:25:31.710 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_name&orderState=asc - null null
2025-03-11 19:25:31.710 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:31.710 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:31.710 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:31.712 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:25:31.714 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:31.714 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:31.714 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.9976ms
2025-03-11 19:25:31.714 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:31.714 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.1427 ms
2025-03-11 19:25:31.714 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_name&orderState=asc - 200 null application/json; charset=utf-8 4.5878ms
2025-03-11 19:25:33.398 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_name&orderState=desc - null null
2025-03-11 19:25:33.398 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:33.398 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:33.398 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:33.400 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:25:33.402 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:33.402 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:33.402 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.8408ms
2025-03-11 19:25:33.402 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:33.402 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.9738 ms
2025-03-11 19:25:33.402 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_name&orderState=desc - 200 null application/json; charset=utf-8 4.374ms
2025-03-11 19:25:35.407 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - null null
2025-03-11 19:25:35.407 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:35.407 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:35.407 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:35.409 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:25:35.412 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:35.412 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:35.412 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 5.4159ms
2025-03-11 19:25:35.412 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:35.412 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 5.6471 ms
2025-03-11 19:25:35.412 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 6.2431ms
2025-03-11 19:25:35.414 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - null null
2025-03-11 19:25:35.414 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:35.414 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:35.414 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:35.416 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:25:35.422 +07:00 [INF] Executed DbCommand (5ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:35.423 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:35.423 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 8.9124ms
2025-03-11 19:25:35.423 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:35.423 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 9.1019 ms
2025-03-11 19:25:35.423 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 9.6467ms
2025-03-11 19:25:37.322 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=2&pageSize=10&orderBy=event_date&orderState=asc - null null
2025-03-11 19:25:37.323 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:37.323 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:37.323 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:37.324 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:25:37.327 +07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-11 19:25:37.327 +07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-11 19:25:37.329 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_0 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:37.329 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:37.330 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 6.8396ms
2025-03-11 19:25:37.330 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:37.330 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 6.9789 ms
2025-03-11 19:25:37.330 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=2&pageSize=10&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 7.4536ms
2025-03-11 19:25:38.145 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - null null
2025-03-11 19:25:38.145 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:38.145 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:38.145 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:38.146 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:25:38.148 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:38.149 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:38.149 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.0435ms
2025-03-11 19:25:38.149 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:38.149 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.1804 ms
2025-03-11 19:25:38.149 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 4.6462ms
2025-03-11 19:25:39.118 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - null null
2025-03-11 19:25:39.118 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:39.118 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:39.118 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:39.120 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:25:39.122 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:39.122 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:39.123 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.1661ms
2025-03-11 19:25:39.123 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:39.123 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.2952 ms
2025-03-11 19:25:39.123 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 4.7433ms
2025-03-11 19:25:50.255 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=event_date&orderState=asc - null null
2025-03-11 19:25:50.255 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:50.255 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:50.255 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:50.257 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:25:50.259 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:50.259 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:50.259 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.257ms
2025-03-11 19:25:50.259 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:50.259 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.4039 ms
2025-03-11 19:25:50.260 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 4.9399ms
2025-03-11 19:25:51.055 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=event_date&orderState=asc - null null
2025-03-11 19:25:51.055 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:51.055 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:51.055 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:51.056 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:25:51.059 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:51.059 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:51.059 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.0357ms
2025-03-11 19:25:51.059 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:51.059 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.1622 ms
2025-03-11 19:25:51.059 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 4.5819ms
2025-03-11 19:25:51.230 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=event_date&orderState=asc - null null
2025-03-11 19:25:51.231 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:51.231 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:51.231 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:51.232 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:25:51.234 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:51.235 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:51.235 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.8839ms
2025-03-11 19:25:51.235 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:51.235 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.1077 ms
2025-03-11 19:25:51.235 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 4.5432ms
2025-03-11 19:25:51.406 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=event_date&orderState=asc - null null
2025-03-11 19:25:51.406 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:51.406 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:51.406 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:51.408 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:25:51.410 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:51.410 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:51.410 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.7543ms
2025-03-11 19:25:51.410 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:51.410 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.8861 ms
2025-03-11 19:25:51.410 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 4.2878ms
2025-03-11 19:25:51.615 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=event_date&orderState=asc - null null
2025-03-11 19:25:51.615 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:51.615 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:51.615 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:51.617 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:25:51.619 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:51.619 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:51.619 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.3621ms
2025-03-11 19:25:51.619 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:51.619 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.5111 ms
2025-03-11 19:25:51.620 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 4.9523ms
2025-03-11 19:25:53.295 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:25:53.295 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:53.295 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:53.295 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:53.297 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:25:53.299 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:53.299 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:53.299 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.2717ms
2025-03-11 19:25:53.299 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:53.299 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.4445 ms
2025-03-11 19:25:53.299 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.9154ms
2025-03-11 19:25:53.462 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:25:53.463 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:53.463 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:53.463 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:53.464 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:25:53.466 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:53.466 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:53.466 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.678ms
2025-03-11 19:25:53.466 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:53.466 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.7951 ms
2025-03-11 19:25:53.467 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.214ms
2025-03-11 19:25:57.150 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - null null
2025-03-11 19:25:57.150 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:57.150 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:57.150 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:57.152 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:25:57.154 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:57.154 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:57.155 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.5501ms
2025-03-11 19:25:57.155 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:57.155 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.7263 ms
2025-03-11 19:25:57.155 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 5.3541ms
2025-03-11 19:25:57.156 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - null null
2025-03-11 19:25:57.156 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:25:57.156 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:57.156 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:25:57.158 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:25:57.160 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:25:57.160 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:25:57.161 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.3771ms
2025-03-11 19:25:57.161 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:25:57.161 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.5457 ms
2025-03-11 19:25:57.161 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 4.9914ms
2025-03-11 19:26:01.407 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - null null
2025-03-11 19:26:01.407 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:26:01.407 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:26:01.407 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:26:01.409 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:26:01.411 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:26:01.411 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:26:01.411 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.2419ms
2025-03-11 19:26:01.412 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:26:01.412 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.3566 ms
2025-03-11 19:26:01.412 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 4.7632ms
2025-03-11 19:26:03.511 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:26:03.511 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:26:03.511 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:26:03.512 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:26:03.513 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:26:03.515 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:26:03.515 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:26:03.515 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.8935ms
2025-03-11 19:26:03.515 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:26:03.515 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.0030 ms
2025-03-11 19:26:03.516 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.3911ms
2025-03-11 19:26:06.063 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=desc - null null
2025-03-11 19:26:06.063 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:26:06.063 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:26:06.063 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:26:06.065 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:26:06.067 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:26:06.067 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:26:06.067 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.786ms
2025-03-11 19:26:06.067 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:26:06.067 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.8908 ms
2025-03-11 19:26:06.067 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=desc - 200 null application/json; charset=utf-8 4.2904ms
2025-03-11 19:26:08.863 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=desc - null null
2025-03-11 19:26:08.864 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:26:08.864 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:26:08.864 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:26:08.865 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:26:08.867 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:26:08.867 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:26:08.867 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.6011ms
2025-03-11 19:26:08.867 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:26:08.867 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.7728 ms
2025-03-11 19:26:08.867 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=desc - 200 null application/json; charset=utf-8 4.1615ms
2025-03-11 19:26:09.327 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=desc - null null
2025-03-11 19:26:09.327 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:26:09.327 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:26:09.327 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:26:09.329 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:26:09.331 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:26:09.331 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:26:09.331 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.6273ms
2025-03-11 19:26:09.331 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:26:09.331 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.7908 ms
2025-03-11 19:26:09.331 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=desc - 200 null application/json; charset=utf-8 4.1921ms
2025-03-11 19:27:49.207 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000 - null null
2025-03-11 19:27:49.207 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:27:49.207 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:27:49.212 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:27:49.215 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:27:49.215 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:27:49.215 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 7.5932ms
2025-03-11 19:27:49.215 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:27:49.215 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 7.7175 ms
2025-03-11 19:27:49.215 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000 - 200 null application/json; charset=utf-8 8.1296ms
2025-03-11 19:27:59.862 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000&OrderBy=Descending - null null
2025-03-11 19:27:59.862 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:27:59.862 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:27:59.862 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:27:59.862 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.4936ms
2025-03-11 19:27:59.862 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:27:59.862 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 0.5861 ms
2025-03-11 19:27:59.862 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000&OrderBy=Descending - 400 null application/problem+json; charset=utf-8 0.9829ms
2025-03-11 19:28:06.852 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000&OrderBy=asc - null null
2025-03-11 19:28:06.852 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:28:06.852 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:28:06.853 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:28:06.853 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.6381ms
2025-03-11 19:28:06.853 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:28:06.853 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 0.7721 ms
2025-03-11 19:28:06.853 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000&OrderBy=asc - 400 null application/problem+json; charset=utf-8 1.2395ms
2025-03-11 19:28:34.013 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000&OrderBy=asc - null null
2025-03-11 19:28:34.013 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:28:34.013 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:28:34.014 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:28:34.014 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.3904ms
2025-03-11 19:28:34.014 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:28:34.014 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 0.9566 ms
2025-03-11 19:28:34.014 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000&OrderBy=asc - 400 null application/problem+json; charset=utf-8 1.5985ms
2025-03-11 19:28:37.114 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000&OrderBy=desc - null null
2025-03-11 19:28:37.114 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:28:37.114 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:28:37.114 +07:00 [INF] Executing BadRequestObjectResult, writing value of type 'Microsoft.AspNetCore.Mvc.ValidationProblemDetails'.
2025-03-11 19:28:37.114 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 0.2624ms
2025-03-11 19:28:37.114 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:28:37.114 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 400 in 0.3414 ms
2025-03-11 19:28:37.114 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000&OrderBy=desc - 400 null application/problem+json; charset=utf-8 0.7907ms
2025-03-11 19:28:45.882 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000&OrderState=desc - null null
2025-03-11 19:28:45.882 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:28:45.882 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:28:45.884 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:28:45.887 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:28:45.887 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:28:45.887 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 5.2567ms
2025-03-11 19:28:45.887 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:28:45.887 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 5.4089 ms
2025-03-11 19:28:45.888 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000&OrderState=desc - 200 null application/json; charset=utf-8 5.9799ms
2025-03-11 19:30:18.206 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=desc - null null
2025-03-11 19:30:18.207 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:18.207 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:18.207 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:18.301 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:18.302 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:18.303 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:18.303 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 95.8544ms
2025-03-11 19:30:18.303 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:18.303 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 96.0360 ms
2025-03-11 19:30:18.303 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=desc - 200 null application/json; charset=utf-8 96.4552ms
2025-03-11 19:30:20.138 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:20.138 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:20.138 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:20.138 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:20.140 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:20.146 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:20.147 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:20.147 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 8.5286ms
2025-03-11 19:30:20.147 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:20.147 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 8.6359 ms
2025-03-11 19:30:20.147 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 9.0881ms
2025-03-11 19:30:20.710 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:20.710 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:20.710 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:20.710 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:20.712 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:20.714 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:20.714 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:20.714 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.7542ms
2025-03-11 19:30:20.714 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:20.714 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.8507 ms
2025-03-11 19:30:20.714 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.2717ms
2025-03-11 19:30:23.356 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=desc - null null
2025-03-11 19:30:23.356 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:23.356 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:23.356 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:23.358 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:23.361 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:23.361 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:23.361 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.6596ms
2025-03-11 19:30:23.361 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:23.361 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.8001 ms
2025-03-11 19:30:23.361 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=desc - 200 null application/json; charset=utf-8 5.3172ms
2025-03-11 19:30:24.006 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=desc - null null
2025-03-11 19:30:24.007 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:24.007 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:24.007 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:24.008 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:24.011 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:24.011 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:24.011 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.1658ms
2025-03-11 19:30:24.011 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:24.011 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.2722 ms
2025-03-11 19:30:24.011 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=desc - 200 null application/json; charset=utf-8 4.7333ms
2025-03-11 19:30:26.563 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:26.563 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:26.563 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:26.563 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:26.564 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:26.567 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:26.567 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:26.567 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.177ms
2025-03-11 19:30:26.567 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:26.567 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.2932 ms
2025-03-11 19:30:26.567 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.7662ms
2025-03-11 19:30:27.399 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:27.399 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:27.399 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:27.399 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:27.401 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:27.403 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:27.403 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:27.403 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.3414ms
2025-03-11 19:30:27.403 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:27.403 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.4466 ms
2025-03-11 19:30:27.404 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.8924ms
2025-03-11 19:30:29.092 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:29.092 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:29.093 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:29.093 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:29.094 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:30:29.096 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:29.096 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:29.096 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.8677ms
2025-03-11 19:30:29.096 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:29.096 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.9896 ms
2025-03-11 19:30:29.097 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.438ms
2025-03-11 19:30:30.447 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:30.447 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:30.447 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:30.447 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:30.448 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:30:30.450 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:30.451 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:30.451 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.8439ms
2025-03-11 19:30:30.451 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:30.451 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.0351 ms
2025-03-11 19:30:30.451 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.3947ms
2025-03-11 19:30:31.785 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:31.785 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:31.785 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:31.785 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:31.787 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:31.789 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:31.789 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:31.789 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.1629ms
2025-03-11 19:30:31.789 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:31.789 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.2955 ms
2025-03-11 19:30:31.789 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.7345ms
2025-03-11 19:30:33.369 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:33.369 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:33.369 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:33.369 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:33.371 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:30:33.373 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:33.374 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:33.374 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.1289ms
2025-03-11 19:30:33.374 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:33.374 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.2723 ms
2025-03-11 19:30:33.374 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.7459ms
2025-03-11 19:30:33.625 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=2&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:33.626 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:33.626 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:33.626 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:33.627 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:33.630 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:33.630 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:33.630 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.5617ms
2025-03-11 19:30:33.630 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:33.630 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.6795 ms
2025-03-11 19:30:33.630 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=2&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 5.1456ms
2025-03-11 19:30:33.861 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=23&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:33.861 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:33.861 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:33.861 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:33.864 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:33.866 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:33.866 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:33.867 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 5.115ms
2025-03-11 19:30:33.867 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:33.867 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 5.2514 ms
2025-03-11 19:30:33.867 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=23&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 5.7332ms
2025-03-11 19:30:34.178 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=2&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:34.179 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:34.179 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:34.179 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:34.180 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:34.182 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:34.183 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:34.183 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.9606ms
2025-03-11 19:30:34.183 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:34.183 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.0853 ms
2025-03-11 19:30:34.183 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=2&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.5286ms
2025-03-11 19:30:34.366 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:34.366 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:34.366 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:34.366 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:34.367 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:30:34.370 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:34.370 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:34.370 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.9933ms
2025-03-11 19:30:34.370 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:34.370 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.1130 ms
2025-03-11 19:30:34.370 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.5789ms
2025-03-11 19:30:34.620 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:34.620 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:34.620 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:34.620 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:34.622 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:34.624 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:34.624 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:34.624 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.3604ms
2025-03-11 19:30:34.624 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:34.624 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.4755 ms
2025-03-11 19:30:34.624 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.9152ms
2025-03-11 19:30:34.795 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=14&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:34.795 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:34.795 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:34.795 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:34.797 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:34.799 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:34.799 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:34.799 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.4363ms
2025-03-11 19:30:34.799 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:34.799 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.5520 ms
2025-03-11 19:30:34.799 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=14&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 5.0267ms
2025-03-11 19:30:34.995 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=141&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:34.995 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:34.995 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:34.995 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:34.996 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:34.999 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:34.999 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:34.999 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.0715ms
2025-03-11 19:30:34.999 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:34.999 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.1946 ms
2025-03-11 19:30:34.999 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=141&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.6832ms
2025-03-11 19:30:35.423 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=14&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:35.423 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:35.423 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:35.423 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:35.425 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:35.427 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:35.427 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:35.427 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.4148ms
2025-03-11 19:30:35.427 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:35.427 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.5296 ms
2025-03-11 19:30:35.428 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=14&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.9925ms
2025-03-11 19:30:35.579 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:35.580 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:35.580 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:35.580 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:35.581 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:35.584 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:35.584 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:35.584 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.3945ms
2025-03-11 19:30:35.584 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:35.584 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.5569 ms
2025-03-11 19:30:35.584 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 5.0634ms
2025-03-11 19:30:35.754 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:35.754 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:35.754 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:35.755 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:35.756 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:30:35.758 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:35.759 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:35.759 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.0253ms
2025-03-11 19:30:35.759 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:35.759 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.1583 ms
2025-03-11 19:30:35.759 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.6495ms
2025-03-11 19:30:36.270 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=5&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:36.270 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:36.270 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:36.270 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:36.272 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:36.274 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:36.274 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:36.274 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.0213ms
2025-03-11 19:30:36.274 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:36.274 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.1448 ms
2025-03-11 19:30:36.274 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=5&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.6072ms
2025-03-11 19:30:36.405 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=51&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:36.406 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:36.406 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:36.406 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:36.407 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:36.410 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:36.410 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:36.410 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.2497ms
2025-03-11 19:30:36.410 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:36.410 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.3940 ms
2025-03-11 19:30:36.410 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=51&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.869ms
2025-03-11 19:30:36.703 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=5&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:36.703 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:36.703 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:36.703 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:36.705 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:30:36.707 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:36.707 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:36.707 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.921ms
2025-03-11 19:30:36.707 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:36.707 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.0278 ms
2025-03-11 19:30:36.707 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=5&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.4553ms
2025-03-11 19:30:36.880 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:30:36.880 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:30:36.880 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:36.880 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:30:36.882 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:30:36.884 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:30:36.884 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:30:36.884 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.0985ms
2025-03-11 19:30:36.884 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:30:36.884 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.2289 ms
2025-03-11 19:30:36.884 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.681ms
2025-03-11 19:31:16.788 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:16.790 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:16.790 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:16.790 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:16.792 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:31:16.797 +07:00 [INF] Executed DbCommand (4ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:16.798 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:16.798 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 7.6395ms
2025-03-11 19:31:16.798 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:16.798 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 7.7977 ms
2025-03-11 19:31:16.798 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 10.1979ms
2025-03-11 19:31:17.512 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:17.512 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:17.512 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:17.512 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:17.514 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:31:17.516 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:17.517 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:17.517 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.2001ms
2025-03-11 19:31:17.517 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:17.517 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.3307 ms
2025-03-11 19:31:17.517 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.7784ms
2025-03-11 19:31:17.744 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=100&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:17.744 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:17.744 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:17.744 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:17.745 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:31:17.748 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:17.748 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:17.748 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.1461ms
2025-03-11 19:31:17.748 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:17.748 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.2655 ms
2025-03-11 19:31:17.748 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=100&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.7258ms
2025-03-11 19:31:17.940 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:17.940 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:17.940 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:17.940 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:17.942 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:31:17.944 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:17.944 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:17.944 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.8558ms
2025-03-11 19:31:17.944 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:17.944 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.9832 ms
2025-03-11 19:31:17.944 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.4335ms
2025-03-11 19:31:18.202 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:18.202 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:18.202 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:18.202 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:18.204 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:31:18.206 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:18.206 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:18.206 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.0124ms
2025-03-11 19:31:18.206 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:18.206 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.1261 ms
2025-03-11 19:31:18.206 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.5707ms
2025-03-11 19:31:18.390 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=100000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:18.390 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:18.390 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:18.390 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:18.392 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:31:18.394 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:18.394 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:18.394 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.9613ms
2025-03-11 19:31:18.394 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:18.394 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.0815 ms
2025-03-11 19:31:18.394 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=100000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.5245ms
2025-03-11 19:31:18.797 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:18.797 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:18.797 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:18.798 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:18.799 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:31:18.802 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:18.802 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:18.802 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.2407ms
2025-03-11 19:31:18.802 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:18.802 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.3635 ms
2025-03-11 19:31:18.802 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.8008ms
2025-03-11 19:31:18.968 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:18.968 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:18.968 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:18.968 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:18.970 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:31:18.972 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:18.972 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:18.972 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.5988ms
2025-03-11 19:31:18.972 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:18.972 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.7203 ms
2025-03-11 19:31:18.972 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.1458ms
2025-03-11 19:31:19.142 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=100000000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:19.143 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:19.143 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:19.143 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:19.144 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:31:19.147 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:19.147 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:19.147 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.0309ms
2025-03-11 19:31:19.147 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:19.147 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.1456 ms
2025-03-11 19:31:19.147 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=100000000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.5769ms
2025-03-11 19:31:20.772 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:20.772 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:20.772 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:20.772 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:20.773 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:31:20.776 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:20.776 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:20.776 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.9811ms
2025-03-11 19:31:20.776 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:20.776 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.0926 ms
2025-03-11 19:31:20.776 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.5359ms
2025-03-11 19:31:21.287 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:21.288 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:21.288 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:21.288 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:21.289 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:31:21.291 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:21.291 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:21.292 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.9246ms
2025-03-11 19:31:21.292 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:21.292 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.0330 ms
2025-03-11 19:31:21.292 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.3382ms
2025-03-11 19:31:21.501 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=100000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:21.501 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:21.501 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:21.501 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:21.503 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:31:21.505 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:21.505 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:21.505 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.7826ms
2025-03-11 19:31:21.505 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:21.505 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.8880 ms
2025-03-11 19:31:21.505 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=100000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.3177ms
2025-03-11 19:31:21.696 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:21.697 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:21.697 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:21.697 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:21.698 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:31:21.701 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:21.701 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:21.701 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.9796ms
2025-03-11 19:31:21.701 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:21.701 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.1217 ms
2025-03-11 19:31:21.701 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.5576ms
2025-03-11 19:31:22.224 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:22.224 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:22.224 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:22.224 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:22.225 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:31:22.228 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:22.228 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:22.228 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.8671ms
2025-03-11 19:31:22.228 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:22.228 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.9842 ms
2025-03-11 19:31:22.228 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.4504ms
2025-03-11 19:31:22.255 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=100&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:22.255 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:22.255 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:22.255 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:22.257 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:31:22.259 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:22.259 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:22.259 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.493ms
2025-03-11 19:31:22.259 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:22.259 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.6021 ms
2025-03-11 19:31:22.259 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=100&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.0132ms
2025-03-11 19:31:22.284 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:22.285 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:22.285 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:22.285 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:22.286 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:31:22.288 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:22.288 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:22.288 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.7226ms
2025-03-11 19:31:22.288 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:22.288 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.8417 ms
2025-03-11 19:31:22.288 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=10&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.2767ms
2025-03-11 19:31:22.315 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:22.315 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:22.315 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:22.315 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:22.317 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:31:22.319 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:22.319 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:22.319 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.8815ms
2025-03-11 19:31:22.319 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:22.319 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.9995 ms
2025-03-11 19:31:22.319 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.44ms
2025-03-11 19:31:22.345 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:31:22.345 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:31:22.345 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:22.345 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:31:22.347 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:31:22.349 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:31:22.349 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:31:22.349 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.5639ms
2025-03-11 19:31:22.349 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:31:22.349 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.6924 ms
2025-03-11 19:31:22.349 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.1284ms
2025-03-11 19:35:57.487 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - null null
2025-03-11 19:35:57.487 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:35:57.487 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:35:57.488 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:35:57.600 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:35:57.602 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:35:57.602 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:35:57.602 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 114.7586ms
2025-03-11 19:35:57.602 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:35:57.602 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 114.9020 ms
2025-03-11 19:35:57.602 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 115.3357ms
2025-03-11 19:36:03.725 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - null null
2025-03-11 19:36:03.725 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:36:03.725 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:03.725 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:36:03.727 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:36:03.729 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:36:03.729 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:36:03.730 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.0831ms
2025-03-11 19:36:03.730 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:03.730 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.2430 ms
2025-03-11 19:36:03.730 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 4.6985ms
2025-03-11 19:36:03.730 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - null null
2025-03-11 19:36:03.731 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:36:03.731 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:03.731 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:36:03.732 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:36:03.737 +07:00 [INF] Executed DbCommand (3ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:36:03.737 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:36:03.737 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 6.7973ms
2025-03-11 19:36:03.738 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:03.738 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 6.9084 ms
2025-03-11 19:36:03.738 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 7.2558ms
2025-03-11 19:36:07.306 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=desc - null null
2025-03-11 19:36:07.306 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:36:07.306 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:07.306 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:36:07.308 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:36:07.309 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:36:07.310 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:36:07.310 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.8837ms
2025-03-11 19:36:07.310 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:07.310 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.0029 ms
2025-03-11 19:36:07.310 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=desc - 200 null application/json; charset=utf-8 4.4082ms
2025-03-11 19:36:10.267 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - null null
2025-03-11 19:36:10.267 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:36:10.267 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:10.267 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:36:10.268 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:36:10.270 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:36:10.271 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:36:10.271 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.8661ms
2025-03-11 19:36:10.271 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:10.271 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.9782 ms
2025-03-11 19:36:10.271 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 4.4182ms
2025-03-11 19:36:13.619 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000&orderBy=event_date&orderState=asc - null null
2025-03-11 19:36:13.619 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:36:13.619 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:13.619 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:36:13.621 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:36:13.623 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:36:13.623 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:36:13.623 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.7812ms
2025-03-11 19:36:13.623 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:13.623 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.9043 ms
2025-03-11 19:36:13.623 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=1000000&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 4.3725ms
2025-03-11 19:36:14.805 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=100000000&orderBy=event_date&orderState=asc - null null
2025-03-11 19:36:14.805 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:36:14.805 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:14.805 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:36:14.806 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:36:14.808 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:36:14.809 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:36:14.809 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.555ms
2025-03-11 19:36:14.809 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:14.809 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.6679 ms
2025-03-11 19:36:14.809 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=100000000&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 4.1204ms
2025-03-11 19:36:27.068 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=100000000&orderBy=ticket_code&orderState=asc - null null
2025-03-11 19:36:27.068 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:36:27.068 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:27.068 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:36:27.070 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:36:27.072 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:36:27.072 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:36:27.072 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.8098ms
2025-03-11 19:36:27.072 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:27.072 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.9215 ms
2025-03-11 19:36:27.072 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=100000000&orderBy=ticket_code&orderState=asc - 200 null application/json; charset=utf-8 4.306ms
2025-03-11 19:36:29.187 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=100000000&orderBy=category_name&orderState=asc - null null
2025-03-11 19:36:29.187 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:36:29.187 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:29.187 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:36:29.189 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:36:29.191 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:36:29.191 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:36:29.191 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.8665ms
2025-03-11 19:36:29.191 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:29.191 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.9792 ms
2025-03-11 19:36:29.191 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&maxPrice=100000000&orderBy=category_name&orderState=asc - 200 null application/json; charset=utf-8 4.3786ms
2025-03-11 19:36:40.301 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000&OrderState=desc - null null
2025-03-11 19:36:40.301 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:40.301 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:36:40.303 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:36:40.305 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:36:40.306 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:36:40.306 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.4886ms
2025-03-11 19:36:40.306 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:40.306 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.6155 ms
2025-03-11 19:36:40.306 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000&OrderState=desc - 200 null application/json; charset=utf-8 5.0856ms
2025-03-11 19:36:45.207 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000&OrderState=asc - null null
2025-03-11 19:36:45.208 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:45.208 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:36:45.209 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:36:45.212 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:36:45.212 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:36:45.212 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.4002ms
2025-03-11 19:36:45.212 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:45.212 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.5024 ms
2025-03-11 19:36:45.212 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000&OrderState=asc - 200 null application/json; charset=utf-8 4.9434ms
2025-03-11 19:36:50.707 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000 - null null
2025-03-11 19:36:50.707 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:50.707 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:36:50.708 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
2025-03-11 19:36:50.711 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_MaxPrice_Value_0='?' (DbType = Int32), @__p_2='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.price <= @__request_MaxPrice_Value_0
    LIMIT @__p_2 OFFSET @__p_1
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:36:50.711 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:36:50.711 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 4.0107ms
2025-03-11 19:36:50.711 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:36:50.711 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 4.1197 ms
2025-03-11 19:36:50.711 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?MaxPrice=10000000 - 200 null application/json; charset=utf-8 4.5706ms
2025-03-11 19:37:09.949 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&ticketCode=C&maxPrice=100000000&orderBy=category_name&orderState=asc - null null
2025-03-11 19:37:09.949 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:37:09.949 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:37:09.949 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:37:09.953 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_TicketCode_0_contains='?', @__request_MaxPrice_Value_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.ticket_code LIKE @__request_TicketCode_0_contains AND t.price <= @__request_MaxPrice_Value_1
2025-03-11 19:37:09.955 +07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-11 19:37:09.955 +07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-11 19:37:09.957 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_TicketCode_0_contains='?', @__request_MaxPrice_Value_1='?' (DbType = Int32), @__p_3='?' (DbType = Int32), @__p_2='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.ticket_code LIKE @__request_TicketCode_0_contains AND t.price <= @__request_MaxPrice_Value_1
    LIMIT @__p_3 OFFSET @__p_2
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:37:09.957 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:37:09.957 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 8.1818ms
2025-03-11 19:37:09.957 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:37:09.957 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 8.3424 ms
2025-03-11 19:37:09.958 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&ticketCode=C&maxPrice=100000000&orderBy=category_name&orderState=asc - 200 null application/json; charset=utf-8 8.8108ms
2025-03-11 19:37:19.300 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=C&maxPrice=100000000&orderBy=category_name&orderState=asc - null null
2025-03-11 19:37:19.300 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:37:19.300 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:37:19.300 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:37:19.304 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_CategoryName_0_contains='?', @__request_MaxPrice_Value_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
INNER JOIN category AS c ON t.category_id = c.category_id
WHERE t.quota > 0 AND c.category_name LIKE @__request_CategoryName_0_contains AND t.price <= @__request_MaxPrice_Value_1
2025-03-11 19:37:19.306 +07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-11 19:37:19.306 +07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-11 19:37:19.308 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_CategoryName_0_contains='?', @__request_MaxPrice_Value_1='?' (DbType = Int32), @__p_3='?' (DbType = Int32), @__p_2='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t.ticket_code AS "TicketCode", t.ticket_name AS "TicketName", c.category_name AS "CategoryName", t.price AS "Price", t.quota AS "Quota", t.event_date AS "EventDate"
FROM ticket AS t
INNER JOIN category AS c ON t.category_id = c.category_id
WHERE t.quota > 0 AND c.category_name LIKE @__request_CategoryName_0_contains AND t.price <= @__request_MaxPrice_Value_1
LIMIT @__p_3 OFFSET @__p_2
2025-03-11 19:37:19.308 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:37:19.308 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 7.9811ms
2025-03-11 19:37:19.308 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:37:19.308 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 8.1042 ms
2025-03-11 19:37:19.308 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&categoryName=C&maxPrice=100000000&orderBy=category_name&orderState=asc - 200 null application/json; charset=utf-8 8.5395ms
2025-03-11 19:37:22.666 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&ticketName=C&maxPrice=100000000&orderBy=category_name&orderState=asc - null null
2025-03-11 19:37:22.666 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:37:22.666 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:37:22.666 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:37:22.669 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_TicketName_0_contains='?', @__request_MaxPrice_Value_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0 AND t.ticket_name LIKE @__request_TicketName_0_contains AND t.price <= @__request_MaxPrice_Value_1
2025-03-11 19:37:22.671 +07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-11 19:37:22.671 +07:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-03-11 19:37:22.674 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__request_TicketName_0_contains='?', @__request_MaxPrice_Value_1='?' (DbType = Int32), @__p_3='?' (DbType = Int32), @__p_2='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0 AND t.ticket_name LIKE @__request_TicketName_0_contains AND t.price <= @__request_MaxPrice_Value_1
    LIMIT @__p_3 OFFSET @__p_2
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:37:22.674 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:37:22.674 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 7.5154ms
2025-03-11 19:37:22.674 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:37:22.674 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 7.6351 ms
2025-03-11 19:37:22.674 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&ticketName=C&maxPrice=100000000&orderBy=category_name&orderState=asc - 200 null application/json; charset=utf-8 8.0239ms
2025-03-11 19:37:33.839 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=category_name&orderState=asc - null null
2025-03-11 19:37:33.840 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:37:33.840 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:37:33.840 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:37:33.841 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:37:33.843 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:37:33.843 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:37:33.843 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 3.6032ms
2025-03-11 19:37:33.843 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:37:33.843 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 3.7139 ms
2025-03-11 19:37:33.844 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=category_name&orderState=asc - 200 null application/json; charset=utf-8 4.0966ms
2025-03-11 19:37:53.779 +07:00 [INF] Request starting HTTP/2 OPTIONS https://localhost:5105/api/v1/book-ticket - null null
2025-03-11 19:37:53.780 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:37:53.781 +07:00 [INF] HTTP OPTIONS /api/v1/book-ticket responded 204 in 1.0932 ms
2025-03-11 19:37:53.781 +07:00 [INF] Request finished HTTP/2 OPTIONS https://localhost:5105/api/v1/book-ticket - 204 null null 1.3017ms
2025-03-11 19:37:53.781 +07:00 [INF] Request starting HTTP/2 POST https://localhost:5105/api/v1/book-ticket - application/json 28
2025-03-11 19:37:53.782 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:37:53.782 +07:00 [INF] Executing endpoint 'BookTicketController.BookTicket (HanselAcceloka)'
2025-03-11 19:37:53.782 +07:00 [INF] Route matched with {action = "BookTicket", controller = "BookTicket"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] BookTicket(HanselAcceloka.Models.Requests.BookTicketRequest) on controller BookTicketController (HanselAcceloka).
2025-03-11 19:37:53.784 +07:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
FROM ticket AS t
2025-03-11 19:37:53.788 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__ticketCodes_0='?' (DbType = Object)], CommandType='"Text"', CommandTimeout='30']
SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name, c.category_id, c.category_name
FROM ticket AS t
INNER JOIN category AS c ON t.category_id = c.category_id
WHERE t.ticket_code = ANY (@__ticketCodes_0)
2025-03-11 19:37:53.792 +07:00 [INF] Executed DbCommand (2ms) [Parameters=[@p0='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
INSERT INTO bookedticket (booked_at)
VALUES (@p0)
RETURNING booked_ticket_id;
2025-03-11 19:37:53.792 +07:00 [INF] Executing OkObjectResult, writing value of type 'HanselAcceloka.Models.Responses.BookTicketResponse'.
2025-03-11 19:37:53.793 +07:00 [INF] Executed action BookTicketController.BookTicket (HanselAcceloka) in 10.4994ms
2025-03-11 19:37:53.793 +07:00 [INF] Executed endpoint 'BookTicketController.BookTicket (HanselAcceloka)'
2025-03-11 19:37:53.793 +07:00 [INF] HTTP POST /api/v1/book-ticket responded 200 in 10.7940 ms
2025-03-11 19:37:53.793 +07:00 [INF] Request finished HTTP/2 POST https://localhost:5105/api/v1/book-ticket - 200 null application/json; charset=utf-8 11.1702ms
2025-03-11 19:40:13.436 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - null null
2025-03-11 19:40:13.436 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:40:13.436 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:40:13.436 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:40:13.442 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:40:13.444 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:40:13.446 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:40:13.447 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 10.567ms
2025-03-11 19:40:13.447 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:40:13.447 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 10.7865 ms
2025-03-11 19:40:13.448 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 11.4877ms
2025-03-11 19:40:13.448 +07:00 [INF] Request starting HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - null null
2025-03-11 19:40:13.449 +07:00 [INF] CORS policy execution successful.
2025-03-11 19:40:13.449 +07:00 [INF] Executing endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:40:13.449 +07:00 [INF] Route matched with {action = "GetAvailableTickets", controller = "Tickets"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAvailableTickets(HanselAcceloka.Application.Tickets.Queries.GetAvailableTicketsQuery) on controller TicketsController (HanselAcceloka).
2025-03-11 19:40:13.455 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT count(*)::int
FROM ticket AS t
WHERE t.quota > 0
2025-03-11 19:40:13.457 +07:00 [INF] Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT t0.ticket_code AS "TicketCode", t0.ticket_name AS "TicketName", c.category_name AS "CategoryName", t0.price AS "Price", t0.quota AS "Quota", t0.event_date AS "EventDate"
FROM (
    SELECT t.ticket_code, t.category_id, t.event_date, t.price, t.quota, t.ticket_name
    FROM ticket AS t
    WHERE t.quota > 0
    LIMIT @__p_1 OFFSET @__p_0
) AS t0
INNER JOIN category AS c ON t0.category_id = c.category_id
2025-03-11 19:40:13.457 +07:00 [INF] Executing OkObjectResult, writing value of type 'PagedResult`1[[HanselAcceloka.Models.TicketModel, HanselAcceloka, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-03-11 19:40:13.457 +07:00 [INF] Executed action TicketsController.GetAvailableTickets (HanselAcceloka) in 7.9034ms
2025-03-11 19:40:13.457 +07:00 [INF] Executed endpoint 'TicketsController.GetAvailableTickets (HanselAcceloka)'
2025-03-11 19:40:13.457 +07:00 [INF] HTTP GET /api/v1/get-available-ticket responded 200 in 8.5213 ms
2025-03-11 19:40:13.457 +07:00 [INF] Request finished HTTP/2 GET https://localhost:5105/api/v1/get-available-ticket?pageNumber=1&pageSize=10&orderBy=event_date&orderState=asc - 200 null application/json; charset=utf-8 8.9033ms
